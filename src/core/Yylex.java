/* The following code was generated by JFlex 1.6.1 */

/*
Copyright 2015 Institute of Computer Science,
Foundation for Research and Technology - Hellas

Licensed under the EUPL, Version 1.1 or - as soon they will be approved
by the European Commission - subsequent versions of the EUPL (the "Licence");
You may not use this work except in compliance with the Licence.
You may obtain a copy of the Licence at:

http://ec.europa.eu/idabc/eupl

Unless required by applicable law or agreed to in writing, software distributed
under the Licence is distributed on an "AS IS" basis,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the Licence for the specific language governing permissions and limitations
under the Licence.

Contact:  POBox 1385, Heraklio Crete, GR-700 13 GREECE
Tel:+30-2810-391632
Fax: +30-2810-391638
E-mail: isl@ics.forth.gr
http://www.ics.forth.gr/isl

Author: Giannis Agathangelos

This file is part of the TimePrimitive project.
*/

package core;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>scanner.flex</tt>
 */
public class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int nominative_number_mode = 2;
  public static final int genitive_number_mode = 4;
  public static final int english_number_mode = 6;
  public static final int dash_mode = 8;
  public static final int first_mode = 10;
  public static final int lower_mode = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\67\25\0\1\42\1\107\2\0\1\106\1\0\1\103"+
    "\1\121\2\0\1\114\1\1\1\74\1\7\1\12\1\112\1\2\1\122"+
    "\1\124\1\125\6\2\1\105\1\104\1\111\1\0\1\110\1\113\1\0"+
    "\1\11\1\34\1\10\1\22\1\17\1\24\1\37\1\30\1\26\1\40"+
    "\1\3\1\15\1\25\1\16\1\23\1\32\1\31\1\20\1\33\1\13"+
    "\1\14\1\36\1\27\1\35\1\21\1\3\1\100\1\0\1\101\1\102"+
    "\1\5\1\6\1\11\1\34\1\10\1\22\1\17\1\24\1\37\1\30"+
    "\1\26\1\40\1\3\1\15\1\25\1\16\1\23\1\32\1\31\1\20"+
    "\1\33\1\13\1\14\1\36\1\27\1\35\1\21\1\3\u0104\0\1\123"+
    "\u0206\0\1\72\1\0\1\60\1\0\1\53\1\0\1\66\1\0\1\73"+
    "\1\44\1\0\1\41\1\75\1\76\1\47\1\50\1\0\1\65\1\0"+
    "\1\43\1\51\1\64\1\61\1\45\1\0\1\54\1\70\1\56\1\0"+
    "\1\63\1\52\1\55\1\77\1\57\1\0\1\44\1\71\1\0\1\72"+
    "\1\60\1\0\1\53\1\0\1\115\1\117\1\120\1\116\1\50\1\0"+
    "\1\65\1\0\1\43\1\51\1\64\1\61\1\45\1\0\1\54\1\70"+
    "\1\56\1\46\1\62\1\52\1\55\1\77\1\57\1\0\1\44\1\71"+
    "\1\0\1\66\1\73\1\44\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ufc41\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\2\1\1\2\1\3\1\4\1\5\1\6\2\3"+
    "\1\7\17\3\1\1\1\4\13\1\1\10\1\1\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\3\1\3\2\3\1\1\26"+
    "\2\1\1\27\1\2\1\30\3\0\1\3\1\31\6\3"+
    "\1\32\11\3\1\33\16\3\25\0\1\34\33\0\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\3\1\44"+
    "\12\3\1\45\13\3\1\46\1\47\11\3\1\50\3\3"+
    "\1\51\1\0\1\51\3\0\1\51\6\0\1\33\7\0"+
    "\1\51\1\33\17\0\2\33\22\0\2\33\13\0\1\52"+
    "\3\3\1\53\2\3\1\54\1\3\1\55\1\56\1\57"+
    "\14\3\1\60\1\3\1\61\1\3\1\62\5\3\1\63"+
    "\1\64\5\0\1\31\6\0\2\47\2\0\1\65\2\0"+
    "\1\60\4\0\1\56\1\60\2\0\1\66\2\65\7\0"+
    "\2\66\4\0\2\45\1\47\1\56\2\0\1\60\1\47"+
    "\2\0\2\67\1\0\2\65\2\47\3\0\1\67\4\0"+
    "\1\67\1\45\3\56\1\0\1\47\1\60\1\50\2\65"+
    "\3\3\1\70\1\71\1\72\1\3\1\73\1\74\6\3"+
    "\1\75\1\76\1\77\1\3\1\100\3\3\1\101\1\3"+
    "\2\102\1\74\2\0\1\103\1\0\1\103\1\0\1\103"+
    "\1\104\4\0\1\102\7\0\1\105\3\0\1\102\1\0"+
    "\1\74\3\0\1\105\1\0\1\106\1\0\1\106\1\74"+
    "\2\0\1\107\11\0\1\74\2\0\1\103\1\106\4\0"+
    "\1\107\1\0\1\106\2\105\1\3\1\110\2\3\1\111"+
    "\1\112\3\3\1\113\1\3\1\114\3\3\1\102\1\115"+
    "\1\102\2\0\1\115\3\0\1\116\1\0\1\116\2\0"+
    "\1\102\5\0\1\117\13\0\1\102\7\0\2\116\3\0"+
    "\1\117\2\0\1\116\1\117\1\120\1\0\1\116\2\0"+
    "\1\117\1\121\1\122\2\3\1\123\1\3\1\124\1\3"+
    "\1\125\1\126\4\0\2\127\1\130\2\0\2\130\1\0"+
    "\1\131\3\0\1\131\3\0\1\130\1\127\1\0\1\131"+
    "\2\0\1\131\1\0\1\130\3\0\1\132\1\0\1\131"+
    "\2\0\1\133\1\0\1\130\1\127\1\131\1\0\2\132"+
    "\2\131\1\130\1\134\1\135\1\136\1\3\2\137\2\0"+
    "\1\112\1\124\3\0\1\112\2\0\1\112\3\0\1\112"+
    "\1\0\1\112\1\0\1\124\2\0\1\137\4\0\1\112"+
    "\1\124\1\112\1\124\1\140\1\141\1\0\1\116\1\0"+
    "\1\116\1\0\1\116\1\142\1\141\4\0\2\116\1\141"+
    "\1\143\1\142\1\116\1\144\1\0\2\145\1\0\1\146"+
    "\1\147\1\146\1\150\1\151";

  private static int [] zzUnpackAction() {
    int [] result = new int[678];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\126\0\254\0\u0102\0\u0158\0\u01ae\0\u0204\0\u025a"+
    "\0\u02b0\0\u0306\0\u035c\0\u025a\0\u025a\0\u02b0\0\u03b2\0\u0408"+
    "\0\u025a\0\u045e\0\u04b4\0\u050a\0\u0560\0\u05b6\0\u060c\0\u0662"+
    "\0\u06b8\0\u070e\0\u0764\0\u07ba\0\u0810\0\u0866\0\u08bc\0\u0912"+
    "\0\u0968\0\u09be\0\u0a14\0\u0a6a\0\u0ac0\0\u0b16\0\u0b6c\0\u0bc2"+
    "\0\u0c18\0\u0c6e\0\u0cc4\0\u0d1a\0\u0d70\0\u025a\0\u0dc6\0\u025a"+
    "\0\u025a\0\u025a\0\u025a\0\u025a\0\u025a\0\u025a\0\u025a\0\u025a"+
    "\0\u025a\0\u025a\0\u025a\0\u025a\0\u0e1c\0\u0e72\0\u0ec8\0\u0f1e"+
    "\0\u0f74\0\u0fca\0\u1020\0\u1076\0\u10cc\0\u025a\0\u1122\0\u1178"+
    "\0\u025a\0\u02b0\0\u025a\0\u11ce\0\u1224\0\u127a\0\u12d0\0\u1326"+
    "\0\u137c\0\u13d2\0\u1428\0\u147e\0\u14d4\0\u152a\0\u035c\0\u1580"+
    "\0\u15d6\0\u162c\0\u1682\0\u16d8\0\u172e\0\u1784\0\u17da\0\u1830"+
    "\0\u035c\0\u1886\0\u18dc\0\u1932\0\u1988\0\u19de\0\u1a34\0\u1a8a"+
    "\0\u1ae0\0\u1b36\0\u1b8c\0\u1be2\0\u1c38\0\u1c8e\0\u1ce4\0\u1d3a"+
    "\0\u1d90\0\u1de6\0\u1e3c\0\u1e92\0\u1ee8\0\u1f3e\0\u1f94\0\u1fea"+
    "\0\u2040\0\u2096\0\u20ec\0\u2142\0\u2198\0\u21ee\0\u2244\0\u229a"+
    "\0\u22f0\0\u2346\0\u239c\0\u23f2\0\u025a\0\u2448\0\u249e\0\u24f4"+
    "\0\u254a\0\u25a0\0\u25f6\0\u264c\0\u26a2\0\u26f8\0\u274e\0\u27a4"+
    "\0\u27fa\0\u2850\0\u28a6\0\u28fc\0\u2952\0\u29a8\0\u29fe\0\u2a54"+
    "\0\u2aaa\0\u2b00\0\u2b56\0\u2bac\0\u2c02\0\u2c58\0\u2cae\0\u2d04"+
    "\0\u025a\0\u025a\0\u025a\0\u025a\0\u025a\0\u025a\0\u025a\0\u2d5a"+
    "\0\u035c\0\u2db0\0\u2e06\0\u2e5c\0\u2eb2\0\u2f08\0\u2f5e\0\u2fb4"+
    "\0\u300a\0\u3060\0\u30b6\0\u035c\0\u310c\0\u3162\0\u31b8\0\u320e"+
    "\0\u3264\0\u32ba\0\u3310\0\u3366\0\u33bc\0\u3412\0\u3468\0\u035c"+
    "\0\u035c\0\u34be\0\u3514\0\u356a\0\u35c0\0\u3616\0\u366c\0\u36c2"+
    "\0\u3718\0\u376e\0\u035c\0\u37c4\0\u381a\0\u3870\0\u38c6\0\u391c"+
    "\0\u025a\0\u3972\0\u39c8\0\u3a1e\0\u3972\0\u3a74\0\u3aca\0\u3b20"+
    "\0\u3b76\0\u3bcc\0\u3c22\0\u3c78\0\u3cce\0\u3d24\0\u3d7a\0\u3dd0"+
    "\0\u3e26\0\u3e7c\0\u3ed2\0\u3f28\0\u3f7e\0\u3fd4\0\u402a\0\u4080"+
    "\0\u40d6\0\u412c\0\u3f7e\0\u4182\0\u41d8\0\u422e\0\u4284\0\u42da"+
    "\0\u4330\0\u4386\0\u43dc\0\u4432\0\u4488\0\u44de\0\u44de\0\u4534"+
    "\0\u458a\0\u45e0\0\u3f28\0\u4636\0\u468c\0\u46e2\0\u4738\0\u478e"+
    "\0\u47e4\0\u483a\0\u4890\0\u48e6\0\u493c\0\u4992\0\u49e8\0\u4a3e"+
    "\0\u4a94\0\u025a\0\u4aea\0\u4b40\0\u4b96\0\u4bec\0\u4c42\0\u4c98"+
    "\0\u4cee\0\u4d44\0\u4d9a\0\u4df0\0\u4e46\0\u025a\0\u4e9c\0\u4ef2"+
    "\0\u4f48\0\u035c\0\u4f9e\0\u4ff4\0\u035c\0\u504a\0\u035c\0\u50a0"+
    "\0\u035c\0\u50f6\0\u514c\0\u51a2\0\u51f8\0\u524e\0\u52a4\0\u52fa"+
    "\0\u5350\0\u53a6\0\u53fc\0\u5452\0\u54a8\0\u035c\0\u54fe\0\u035c"+
    "\0\u5554\0\u035c\0\u55aa\0\u5600\0\u5656\0\u56ac\0\u5702\0\u035c"+
    "\0\u035c\0\u5758\0\u57ae\0\u5804\0\u585a\0\u58b0\0\u025a\0\u5906"+
    "\0\u595c\0\u59b2\0\u5a08\0\u5a5e\0\u5ab4\0\u5b0a\0\u5b60\0\u5bb6"+
    "\0\u5c0c\0\u5c62\0\u5cb8\0\u5d0e\0\u5d64\0\u5dba\0\u5e10\0\u5e66"+
    "\0\u5ebc\0\u025a\0\u025a\0\u5f12\0\u5f68\0\u025a\0\u5fbe\0\u025a"+
    "\0\u6014\0\u606a\0\u60c0\0\u6116\0\u616c\0\u61c2\0\u6218\0\u626e"+
    "\0\u62c4\0\u631a\0\u6370\0\u63c6\0\u641c\0\u025a\0\u6472\0\u025a"+
    "\0\u64c8\0\u64c8\0\u651e\0\u5804\0\u6574\0\u65ca\0\u6620\0\u5c0c"+
    "\0\u025a\0\u6676\0\u66cc\0\u6014\0\u6722\0\u6778\0\u67ce\0\u626e"+
    "\0\u6824\0\u687a\0\u687a\0\u68d0\0\u6926\0\u697c\0\u68d0\0\u626e"+
    "\0\u69d2\0\u6a28\0\u626e\0\u6a7e\0\u6824\0\u5a08\0\u025a\0\u6ad4"+
    "\0\u6b2a\0\u6b80\0\u6bd6\0\u6c2c\0\u035c\0\u035c\0\u035c\0\u6c82"+
    "\0\u035c\0\u035c\0\u6cd8\0\u6d2e\0\u6d84\0\u6dda\0\u6e30\0\u6e86"+
    "\0\u035c\0\u035c\0\u035c\0\u6edc\0\u035c\0\u6f32\0\u6f88\0\u6fde"+
    "\0\u035c\0\u7034\0\u708a\0\u70e0\0\u025a\0\u7136\0\u718c\0\u71e2"+
    "\0\u7238\0\u025a\0\u728e\0\u728e\0\u025a\0\u72e4\0\u733a\0\u7390"+
    "\0\u73e6\0\u743c\0\u7492\0\u74e8\0\u753e\0\u7594\0\u75ea\0\u7640"+
    "\0\u7696\0\u025a\0\u76ec\0\u7742\0\u7798\0\u77ee\0\u7844\0\u789a"+
    "\0\u78f0\0\u7946\0\u799c\0\u79f2\0\u7a48\0\u7a9e\0\u7a9e\0\u025a"+
    "\0\u799c\0\u7af4\0\u7b4a\0\u025a\0\u7ba0\0\u7bf6\0\u7c4c\0\u7ca2"+
    "\0\u7cf8\0\u7d4e\0\u7da4\0\u7dfa\0\u7e50\0\u7798\0\u7ea6\0\u7efc"+
    "\0\u7238\0\u7f52\0\u7f52\0\u7fa8\0\u7ffe\0\u8054\0\u80aa\0\u80aa"+
    "\0\u76ec\0\u8100\0\u7798\0\u8156\0\u035c\0\u81ac\0\u8202\0\u035c"+
    "\0\u035c\0\u8258\0\u82ae\0\u8304\0\u035c\0\u835a\0\u035c\0\u83b0"+
    "\0\u8406\0\u845c\0\u025a\0\u025a\0\u84b2\0\u8508\0\u855e\0\u855e"+
    "\0\u85b4\0\u860a\0\u8660\0\u86b6\0\u86b6\0\u025a\0\u870c\0\u8762"+
    "\0\u87b8\0\u880e\0\u8864\0\u88ba\0\u8910\0\u8966\0\u025a\0\u89bc"+
    "\0\u8a12\0\u8a68\0\u8abe\0\u8b14\0\u8b6a\0\u8bc0\0\u8c16\0\u8c6c"+
    "\0\u8cc2\0\u8d18\0\u8d6e\0\u8d6e\0\u8dc4\0\u8e1a\0\u8e70\0\u8ec6"+
    "\0\u8f1c\0\u8f72\0\u870c\0\u8fc8\0\u901e\0\u9074\0\u90ca\0\u9120"+
    "\0\u9176\0\u91cc\0\u8762\0\u8762\0\u025a\0\u9222\0\u9278\0\u92ce"+
    "\0\u9324\0\u89bc\0\u035c\0\u035c\0\u937a\0\u93d0\0\u035c\0\u9426"+
    "\0\u035c\0\u947c\0\u035c\0\u035c\0\u94d2\0\u9528\0\u957e\0\u95d4"+
    "\0\u95d4\0\u025a\0\u962a\0\u9680\0\u96d6\0\u025a\0\u96d6\0\u972c"+
    "\0\u9782\0\u97d8\0\u982e\0\u9884\0\u025a\0\u98da\0\u9930\0\u9986"+
    "\0\u99dc\0\u9a32\0\u9a32\0\u9a88\0\u9a88\0\u9ade\0\u9b34\0\u9b8a"+
    "\0\u9be0\0\u9c36\0\u9c8c\0\u9ce2\0\u025a\0\u9d38\0\u9930\0\u9d8e"+
    "\0\u9de4\0\u025a\0\u9e3a\0\u9e90\0\u957e\0\u9ee6\0\u9f3c\0\u9de4"+
    "\0\u95d4\0\u9e3a\0\u9680\0\u9f92\0\u035c\0\u035c\0\u035c\0\u9fe8"+
    "\0\ua03e\0\u025a\0\ua03e\0\ua094\0\u025a\0\u025a\0\ua0ea\0\ua140"+
    "\0\ua196\0\ua1ec\0\ua242\0\ua298\0\ua2ee\0\ua2ee\0\ua344\0\ua39a"+
    "\0\ua140\0\ua3f0\0\ua39a\0\ua446\0\ua49c\0\ua49c\0\ua4f2\0\ua298"+
    "\0\ua548\0\ua59e\0\ua5f4\0\ua64a\0\ua3f0\0\ua6a0\0\ua6f6\0\ua140"+
    "\0\u035c\0\u025a\0\ua74c\0\ua7a2\0\ua7a2\0\ua7f8\0\ua84e\0\ua74c"+
    "\0\u025a\0\ua84e\0\ua8a4\0\ua8fa\0\ua950\0\ua9a6\0\ua9fc\0\ua8fa"+
    "\0\ua74c\0\u025a\0\ua950\0\uaa52\0\u025a\0\uaaa8\0\uaaa8\0\u025a"+
    "\0\uaafe\0\u025a\0\u025a\0\uaaa8\0\u025a\0\u025a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[678];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\14\1\10\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\2\13\1\27\1\30\1\31\1\32\2\13\1\33\1\34"+
    "\1\35\1\36\1\37\3\13\1\40\1\41\1\42\1\43"+
    "\1\10\1\44\1\10\1\45\1\46\1\10\1\47\1\10"+
    "\1\50\1\51\2\10\1\46\1\52\2\53\2\10\1\54"+
    "\1\14\1\55\3\10\1\56\2\10\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\2\77\1\10\1\100"+
    "\1\10\1\101\1\102\54\10\1\103\125\10\1\104\64\10"+
    "\1\105\121\10\1\106\134\10\1\107\1\10\1\107\12\10"+
    "\1\110\67\10\1\110\123\10\1\111\4\10\130\0\1\112"+
    "\117\0\1\112\1\0\2\112\2\0\1\12\4\0\1\113"+
    "\3\0\1\114\40\0\1\115\45\0\1\12\1\0\2\12"+
    "\2\0\2\13\1\0\1\13\1\116\1\0\2\13\1\0"+
    "\26\13\61\0\1\13\1\0\2\13\2\0\2\13\1\0"+
    "\1\13\1\116\1\0\1\13\1\117\1\0\4\13\1\120"+
    "\21\13\61\0\1\13\1\0\2\13\2\0\2\13\1\0"+
    "\1\13\1\116\1\0\1\13\1\121\1\0\1\13\1\122"+
    "\1\123\1\124\13\13\1\125\6\13\61\0\1\13\1\0"+
    "\2\13\2\0\2\13\1\0\1\13\1\116\1\0\2\13"+
    "\1\0\4\13\1\126\3\13\1\127\4\13\1\130\10\13"+
    "\61\0\1\13\1\0\2\13\2\0\2\13\1\0\1\13"+
    "\1\116\1\0\2\13\1\0\2\13\1\131\23\13\61\0"+
    "\1\13\1\0\2\13\2\0\2\13\1\0\1\13\1\116"+
    "\1\0\1\13\1\132\1\0\26\13\61\0\1\13\1\0"+
    "\2\13\2\0\2\13\1\0\1\13\1\116\1\0\2\13"+
    "\1\0\10\13\1\133\2\13\1\134\12\13\61\0\1\13"+
    "\1\0\2\13\2\0\2\13\1\0\1\13\1\116\1\0"+
    "\1\13\1\135\1\0\13\13\1\136\12\13\61\0\1\13"+
    "\1\0\2\13\2\0\2\13\1\0\1\13\1\116\1\0"+
    "\2\13\1\0\4\13\1\137\21\13\61\0\1\13\1\0"+
    "\2\13\2\0\2\13\1\0\1\13\1\116\1\0\1\140"+
    "\1\13\1\0\11\13\1\141\14\13\61\0\1\13\1\0"+
    "\2\13\2\0\2\13\1\0\1\13\1\116\1\0\2\13"+
    "\1\0\4\13\1\142\3\13\1\143\2\13\1\144\12\13"+
    "\61\0\1\13\1\0\2\13\2\0\2\13\1\0\1\13"+
    "\1\116\1\0\1\13\1\145\1\0\13\13\1\146\12\13"+
    "\61\0\1\13\1\0\2\13\2\0\2\13\1\0\1\13"+
    "\1\116\1\0\1\13\1\147\1\0\26\13\61\0\1\13"+
    "\1\0\2\13\2\0\2\13\1\0\1\13\1\116\1\0"+
    "\2\13\1\0\1\13\1\150\24\13\61\0\1\13\1\0"+
    "\2\13\2\0\2\13\1\0\1\13\1\116\1\0\2\13"+
    "\1\0\5\13\1\151\2\13\1\152\15\13\61\0\1\13"+
    "\1\0\2\13\2\0\2\13\1\0\1\13\1\116\1\0"+
    "\2\13\1\0\4\13\1\153\6\13\1\154\12\13\61\0"+
    "\1\13\1\0\2\13\2\0\2\13\1\0\1\13\1\116"+
    "\1\0\1\155\1\13\1\0\26\13\61\0\1\13\1\0"+
    "\2\13\2\0\2\13\1\0\1\13\1\116\1\0\1\13"+
    "\1\156\1\0\1\13\1\157\24\13\61\0\1\13\1\0"+
    "\2\13\42\0\1\160\1\161\11\0\1\162\1\163\11\0"+
    "\1\164\2\0\1\162\44\0\1\165\26\0\1\166\1\167"+
    "\1\170\1\171\1\172\2\0\1\173\1\174\2\0\1\175"+
    "\1\162\1\176\1\0\1\177\1\0\2\200\4\0\1\164"+
    "\1\0\1\201\1\162\1\202\1\203\1\204\16\0\1\166"+
    "\1\0\1\203\1\204\1\205\45\0\1\206\1\207\11\0"+
    "\1\210\40\0\1\206\52\0\1\211\11\0\1\211\113\0"+
    "\1\212\5\0\1\212\7\0\1\213\107\0\1\172\2\0"+
    "\1\172\3\0\1\214\22\0\1\215\1\203\21\0\1\203"+
    "\50\0\1\216\1\0\1\171\3\0\1\217\3\0\1\220"+
    "\1\0\1\221\1\0\1\222\107\0\1\223\6\0\1\224"+
    "\22\0\1\204\1\0\1\204\21\0\1\204\47\0\1\200"+
    "\17\0\2\200\54\0\1\165\26\0\1\201\1\225\1\226"+
    "\4\0\1\227\7\0\1\230\11\0\1\201\22\0\1\201"+
    "\52\0\1\231\5\0\1\231\117\0\1\204\31\0\1\204"+
    "\1\0\1\204\21\0\1\204\17\0\1\232\27\0\1\233"+
    "\5\0\1\234\5\0\1\235\1\0\1\234\107\0\1\236"+
    "\5\0\1\236\117\0\1\160\1\161\11\0\1\162\1\163"+
    "\11\0\1\164\2\0\1\162\25\0\1\205\46\0\1\212"+
    "\5\0\1\212\7\0\1\213\40\0\1\205\125\0\1\205"+
    "\6\0\1\12\4\0\1\113\3\0\1\114\17\0\1\237"+
    "\20\0\1\115\45\0\1\12\1\237\2\12\2\0\1\12"+
    "\4\0\1\113\3\0\1\114\2\0\1\240\35\0\1\115"+
    "\45\0\1\12\1\0\2\12\2\0\1\12\4\0\1\113"+
    "\3\0\1\114\4\0\1\240\33\0\1\115\45\0\1\12"+
    "\1\0\2\12\46\0\1\241\13\0\2\241\117\0\1\242"+
    "\100\0\1\243\117\0\1\243\116\0\1\243\142\0\1\244"+
    "\143\0\1\245\6\0\1\246\4\0\2\245\44\0\2\13"+
    "\1\0\1\13\2\0\2\13\1\0\26\13\61\0\1\13"+
    "\1\0\2\13\2\0\2\13\1\0\1\13\1\116\1\0"+
    "\2\13\1\247\26\13\61\0\1\13\1\0\2\13\2\0"+
    "\2\13\1\0\1\13\1\116\1\0\2\13\1\0\3\13"+
    "\1\250\22\13\61\0\1\13\1\0\2\13\2\0\2\13"+
    "\1\0\1\13\1\116\1\0\2\13\1\0\1\251\25\13"+
    "\61\0\1\13\1\0\2\13\2\0\2\13\1\0\1\13"+
    "\1\116\1\0\2\13\1\0\24\13\1\252\1\13\61\0"+
    "\1\13\1\0\2\13\2\0\2\13\1\0\1\13\1\116"+
    "\1\0\2\13\1\0\2\13\1\253\23\13\61\0\1\13"+
    "\1\0\2\13\2\0\2\13\1\0\1\13\1\116\1\0"+
    "\2\13\1\0\1\254\25\13\61\0\1\13\1\0\2\13"+
    "\2\0\2\13\1\0\1\13\1\116\1\0\2\13\1\0"+
    "\5\13\1\255\20\13\61\0\1\13\1\0\2\13\2\0"+
    "\2\13\1\0\1\13\1\116\1\0\2\13\1\0\3\13"+
    "\1\256\22\13\61\0\1\13\1\0\2\13\2\0\2\13"+
    "\1\0\1\13\1\116\1\0\1\13\1\257\1\0\13\13"+
    "\1\260\12\13\61\0\1\13\1\0\2\13\2\0\2\13"+
    "\1\0\1\13\1\116\1\0\1\13\1\261\1\0\26\13"+
    "\61\0\1\13\1\0\2\13\2\0\2\13\1\0\1\13"+
    "\1\116\1\0\2\13\1\0\1\262\17\13\1\263\5\13"+
    "\61\0\1\13\1\0\2\13\2\0\2\13\1\0\1\13"+
    "\1\116\1\0\2\13\1\0\14\13\1\264\6\13\1\265"+
    "\2\13\61\0\1\13\1\0\2\13\2\0\2\13\1\0"+
    "\1\13\1\116\1\0\2\13\1\0\3\13\1\266\22\13"+
    "\61\0\1\13\1\0\2\13\2\0\2\13\1\0\1\13"+
    "\1\116\1\0\2\13\1\0\5\13\1\267\20\13\61\0"+
    "\1\13\1\0\2\13\2\0\2\13\1\0\1\13\1\116"+
    "\1\0\2\13\1\0\24\13\1\270\1\13\61\0\1\13"+
    "\1\0\2\13\2\0\2\13\1\0\1\13\1\116\1\0"+
    "\1\271\1\13\1\0\26\13\61\0\1\13\1\0\2\13"+
    "\2\0\2\13\1\0\1\13\1\116\1\0\2\13\1\0"+
    "\1\272\25\13\61\0\1\13\1\0\2\13\2\0\2\13"+
    "\1\0\1\13\1\116\1\0\2\13\1\0\21\13\1\273"+
    "\4\13\61\0\1\13\1\0\2\13\2\0\2\13\1\0"+
    "\1\13\1\116\1\0\2\13\1\0\1\13\1\274\24\13"+
    "\61\0\1\13\1\0\2\13\2\0\2\13\1\0\1\13"+
    "\1\116\1\0\2\13\1\0\5\13\1\275\3\13\1\276"+
    "\14\13\61\0\1\13\1\0\2\13\2\0\2\13\1\0"+
    "\1\13\1\116\1\0\2\13\1\0\5\13\1\277\1\300"+
    "\17\13\61\0\1\13\1\0\2\13\2\0\2\13\1\0"+
    "\1\13\1\116\1\0\2\13\1\0\7\13\1\301\16\13"+
    "\61\0\1\13\1\0\2\13\2\0\2\13\1\0\1\13"+
    "\1\116\1\0\2\13\1\0\2\13\1\302\23\13\61\0"+
    "\1\13\1\0\2\13\2\0\2\13\1\0\1\13\1\116"+
    "\1\0\1\13\1\303\1\0\4\13\1\304\21\13\61\0"+
    "\1\13\1\0\2\13\2\0\2\13\1\0\1\13\1\116"+
    "\1\0\2\13\1\0\13\13\1\305\12\13\61\0\1\13"+
    "\1\0\2\13\2\0\2\13\1\0\1\13\1\116\1\0"+
    "\2\13\1\0\20\13\1\306\5\13\61\0\1\13\1\0"+
    "\2\13\2\0\2\13\1\0\1\13\1\116\1\0\1\307"+
    "\1\13\1\0\17\13\1\310\3\13\1\311\2\13\61\0"+
    "\1\13\1\0\2\13\2\0\2\13\1\0\1\13\1\116"+
    "\1\0\2\13\1\0\22\13\1\312\3\13\61\0\1\13"+
    "\1\0\2\13\2\0\2\13\1\0\1\13\1\116\1\0"+
    "\2\13\1\0\4\13\1\313\21\13\61\0\1\13\1\0"+
    "\2\13\2\0\2\13\1\0\1\13\1\116\1\0\2\13"+
    "\1\0\3\13\1\314\22\13\61\0\1\13\1\0\2\13"+
    "\2\0\2\13\1\0\1\13\1\116\1\0\2\13\1\0"+
    "\2\13\1\315\1\316\22\13\61\0\1\13\1\0\2\13"+
    "\42\0\1\317\1\0\1\320\7\0\1\321\1\0\1\322"+
    "\1\323\6\0\1\321\5\0\1\324\1\0\1\324\21\0"+
    "\1\324\47\0\1\320\1\0\1\320\123\0\1\324\31\0"+
    "\1\324\1\0\1\324\21\0\1\324\47\0\1\323\14\0"+
    "\1\323\110\0\1\325\11\0\1\321\1\0\1\322\7\0"+
    "\1\321\101\0\1\326\14\0\1\326\110\0\1\327\1\330"+
    "\1\0\1\331\10\0\1\332\12\0\1\330\75\0\1\333"+
    "\1\334\1\335\1\336\1\331\1\0\1\337\1\340\1\341"+
    "\1\342\1\343\1\344\1\345\1\346\1\323\1\340\1\347"+
    "\2\350\1\351\1\0\1\321\1\0\1\352\1\330\1\0"+
    "\1\353\1\324\1\354\1\324\16\0\1\333\1\337\1\354"+
    "\1\324\47\0\1\355\1\0\1\320\15\0\2\356\104\0"+
    "\1\357\13\0\1\357\110\0\2\333\52\0\1\333\52\0"+
    "\1\360\6\0\1\341\1\361\2\0\1\362\3\0\1\347"+
    "\2\363\1\351\3\0\1\352\2\0\1\362\1\0\1\354"+
    "\21\0\1\354\50\0\1\364\7\0\1\364\115\0\1\365"+
    "\5\0\1\340\4\0\1\366\2\0\1\340\12\0\1\367"+
    "\74\0\1\370\1\371\1\372\6\0\1\343\1\373\2\0"+
    "\1\323\110\0\1\374\6\0\1\375\1\376\6\0\1\347"+
    "\2\363\1\377\103\0\1\u0100\7\0\1\u0100\115\0\1\u0101"+
    "\1\330\12\0\1\332\12\0\1\330\76\0\1\u0102\4\0"+
    "\1\u0103\2\0\1\u0104\43\0\1\u0103\51\0\1\u0105\4\0"+
    "\1\u0105\46\0\1\u0105\51\0\1\337\4\0\1\337\46\0"+
    "\1\337\51\0\1\331\2\0\1\331\122\0\1\u0106\2\0"+
    "\1\331\7\0\1\367\15\0\1\367\74\0\1\367\12\0"+
    "\1\367\15\0\1\367\74\0\1\340\5\0\1\340\7\0"+
    "\1\340\107\0\1\u0107\6\0\1\341\3\0\1\362\15\0"+
    "\1\362\74\0\1\375\6\0\1\375\116\0\1\u0104\7\0"+
    "\1\u0104\115\0\1\u0108\4\0\1\u0105\2\0\1\u0104\43\0"+
    "\1\u0105\51\0\1\u0109\1\343\6\0\1\376\1\343\1\0"+
    "\1\u010a\1\357\5\0\1\351\103\0\1\u010b\7\0\1\376"+
    "\11\0\1\351\103\0\1\u010a\12\0\1\u010a\112\0\2\343"+
    "\7\0\1\343\114\0\1\u010c\7\0\1\376\11\0\1\377"+
    "\103\0\1\u010d\4\0\1\337\2\0\1\u010e\43\0\1\337"+
    "\51\0\1\u010e\7\0\1\u010e\115\0\1\u010f\1\330\6\0"+
    "\1\u0110\3\0\1\332\3\0\2\350\5\0\1\330\76\0"+
    "\1\356\17\0\2\356\104\0\1\u0111\7\0\1\u0110\7\0"+
    "\2\363\104\0\1\363\17\0\2\363\104\0\1\352\25\0"+
    "\1\352\77\0\1\u0112\14\0\1\u0112\110\0\1\u0113\1\u0114"+
    "\1\372\7\0\1\373\4\0\1\347\106\0\1\347\16\0"+
    "\1\347\106\0\1\u0115\1\u0114\1\372\7\0\1\373\113\0"+
    "\1\354\32\0\1\354\21\0\1\354\21\0\1\u0116\134\0"+
    "\1\u0116\105\0\2\13\1\0\1\13\1\116\1\0\2\13"+
    "\1\0\1\u0117\25\13\61\0\1\13\1\0\2\13\2\0"+
    "\2\13\1\0\1\13\1\116\1\0\2\13\1\0\1\13"+
    "\1\u0118\24\13\61\0\1\13\1\0\2\13\2\0\2\13"+
    "\1\0\1\13\1\116\1\0\2\13\1\0\1\u0119\25\13"+
    "\61\0\1\13\1\0\2\13\2\0\2\13\1\0\1\13"+
    "\1\116\1\0\2\13\1\0\4\13\1\u011a\21\13\61\0"+
    "\1\13\1\0\2\13\2\0\2\13\1\0\1\13\1\116"+
    "\1\0\2\13\1\0\13\13\1\u011b\12\13\61\0\1\13"+
    "\1\0\2\13\2\0\2\13\1\0\1\13\1\116\1\0"+
    "\2\13\1\0\1\u011c\25\13\61\0\1\13\1\0\2\13"+
    "\2\0\2\13\1\0\1\13\1\116\1\0\2\13\1\0"+
    "\3\13\1\u011d\22\13\61\0\1\13\1\0\2\13\2\0"+
    "\2\13\1\0\1\13\1\116\1\0\2\13\1\0\5\13"+
    "\1\u011e\20\13\61\0\1\13\1\0\2\13\2\0\2\13"+
    "\1\0\1\13\1\116\1\0\2\13\1\0\3\13\1\u011f"+
    "\22\13\61\0\1\13\1\0\2\13\2\0\2\13\1\0"+
    "\1\13\1\116\1\0\2\13\1\0\4\13\1\u0120\21\13"+
    "\61\0\1\13\1\0\2\13\2\0\2\13\1\0\1\13"+
    "\1\116\1\0\2\13\1\0\1\u0121\25\13\61\0\1\13"+
    "\1\0\2\13\2\0\2\13\1\0\1\13\1\116\1\0"+
    "\2\13\1\0\4\13\1\u0122\21\13\61\0\1\13\1\0"+
    "\2\13\2\0\2\13\1\0\1\13\1\116\1\0\2\13"+
    "\1\0\1\u0123\25\13\61\0\1\13\1\0\2\13\2\0"+
    "\2\13\1\0\1\13\1\116\1\0\2\13\1\0\2\13"+
    "\1\u0124\23\13\61\0\1\13\1\0\2\13\2\0\2\13"+
    "\1\0\1\13\1\116\1\0\2\13\1\0\15\13\1\u0125"+
    "\10\13\61\0\1\13\1\0\2\13\2\0\2\13\1\0"+
    "\1\13\1\116\1\0\1\13\1\u0126\1\0\4\13\1\u0127"+
    "\21\13\61\0\1\13\1\0\2\13\2\0\2\13\1\0"+
    "\1\13\1\116\1\0\2\13\1\0\10\13\1\u0128\15\13"+
    "\61\0\1\13\1\0\2\13\2\0\2\13\1\0\1\13"+
    "\1\116\1\0\2\13\1\0\5\13\1\u0129\20\13\61\0"+
    "\1\13\1\0\2\13\2\0\2\13\1\0\1\13\1\116"+
    "\1\0\2\13\1\0\5\13\1\u012a\20\13\61\0\1\13"+
    "\1\0\2\13\2\0\2\13\1\0\1\13\1\116\1\0"+
    "\2\13\1\0\20\13\1\u012b\5\13\61\0\1\13\1\0"+
    "\2\13\2\0\2\13\1\0\1\13\1\116\1\0\2\13"+
    "\1\0\1\u012c\25\13\61\0\1\13\1\0\2\13\2\0"+
    "\2\13\1\0\1\13\1\116\1\0\1\u012d\1\13\1\0"+
    "\26\13\61\0\1\13\1\0\2\13\2\0\2\13\1\0"+
    "\1\13\1\116\1\0\2\13\1\0\11\13\1\u012e\14\13"+
    "\61\0\1\13\1\0\2\13\2\0\2\13\1\0\1\13"+
    "\1\116\1\0\2\13\1\0\5\13\1\u012f\20\13\61\0"+
    "\1\13\1\0\2\13\2\0\2\13\1\0\1\13\1\116"+
    "\1\0\2\13\1\0\12\13\1\u0130\13\13\61\0\1\13"+
    "\1\0\2\13\2\0\2\13\1\0\1\13\1\116\1\0"+
    "\2\13\1\0\10\13\1\u0131\15\13\61\0\1\13\1\0"+
    "\2\13\2\0\2\13\1\0\1\13\1\116\1\0\2\13"+
    "\1\0\1\u0132\25\13\61\0\1\13\1\0\2\13\2\0"+
    "\2\13\1\0\1\13\1\116\1\0\2\13\1\0\10\13"+
    "\1\u0133\15\13\61\0\1\13\1\0\2\13\2\0\2\13"+
    "\1\0\1\13\1\116\1\0\2\13\1\0\1\u0134\25\13"+
    "\61\0\1\13\1\0\2\13\2\0\2\13\1\0\1\13"+
    "\1\116\1\0\2\13\1\0\4\13\1\u0135\21\13\61\0"+
    "\1\13\1\0\2\13\2\0\2\13\1\0\1\13\1\116"+
    "\1\0\2\13\1\0\1\u0136\25\13\61\0\1\13\1\0"+
    "\2\13\2\0\2\13\1\0\1\13\1\116\1\0\2\13"+
    "\1\0\1\13\1\u0137\24\13\61\0\1\13\1\0\2\13"+
    "\2\0\2\13\1\0\1\13\1\116\1\0\2\13\1\0"+
    "\6\13\1\u0138\17\13\61\0\1\13\1\0\2\13\2\0"+
    "\2\13\1\0\1\13\1\116\1\0\2\13\1\0\4\13"+
    "\1\u0139\21\13\61\0\1\13\1\0\2\13\42\0\1\u013a"+
    "\1\u013b\1\0\1\u013c\2\0\1\u013d\2\0\1\u013b\1\u013e"+
    "\3\0\1\u013d\107\0\1\u013c\2\0\1\u013c\122\0\2\u013b"+
    "\7\0\1\u013b\114\0\1\u013d\5\0\1\u013d\7\0\1\u013d"+
    "\107\0\1\u013e\11\0\1\u013e\63\0\1\u013f\155\0\1\u0140"+
    "\7\0\1\u0141\1\0\1\u0142\113\0\1\u0143\11\0\1\u0143"+
    "\113\0\1\u0144\11\0\1\u0144\113\0\1\u0141\7\0\1\u0141"+
    "\115\0\1\u0145\7\0\1\u0145\114\0\1\u0146\1\u0147\1\u0148"+
    "\1\u0149\1\u014a\2\0\1\u014b\1\0\1\u014c\1\u013b\1\u014d"+
    "\1\0\1\u014e\1\0\1\u014f\1\u0150\2\0\1\u0151\1\u0152"+
    "\1\u0153\1\0\1\u0154\1\u0155\1\u0156\22\0\1\u0146\52\0"+
    "\1\u0157\2\0\1\u0158\4\0\1\u0159\1\0\1\u0143\113\0"+
    "\1\u015a\2\0\1\u013c\4\0\1\u015b\115\0\1\u015c\11\0"+
    "\1\u015c\113\0\1\u0150\16\0\1\u0150\105\0\1\u015d\1\u015e"+
    "\5\0\1\u015f\7\0\1\u015f\34\0\1\u015d\51\0\1\u0160"+
    "\1\u0161\1\0\1\u0149\3\0\1\u0162\21\0\1\u0156\22\0"+
    "\1\u0160\52\0\1\u0159\7\0\1\u0159\115\0\2\u0155\25\0"+
    "\1\u0155\76\0\1\u0163\2\0\1\u0164\4\0\1\u0165\11\0"+
    "\1\u0151\102\0\1\u0166\1\u0167\1\u013b\6\0\1\u0141\1\u013b"+
    "\41\0\1\u0166\52\0\1\u0154\25\0\1\u0154\76\0\2\u0168"+
    "\11\0\1\u0153\11\0\1\u0153\26\0\1\u0168\52\0\1\u0169"+
    "\5\0\1\u016a\14\0\1\u0152\102\0\1\u016b\7\0\1\u016b"+
    "\115\0\1\u014e\13\0\1\u014e\111\0\1\u016c\2\0\1\u013c"+
    "\6\0\1\u0153\11\0\1\u0153\101\0\1\u0153\11\0\1\u0153"+
    "\11\0\1\u0153\100\0\2\u0166\52\0\1\u0166\51\0\1\u0146"+
    "\1\u016d\5\0\1\u016e\1\0\1\u016f\3\0\1\u014e\1\0"+
    "\1\u015f\4\0\1\u0152\2\0\1\u0154\1\0\1\u0156\22\0"+
    "\1\u0146\51\0\2\u0160\27\0\1\u0156\22\0\1\u0160\52\0"+
    "\1\u0165\7\0\1\u0165\114\0\2\u0168\52\0\1\u0168\52\0"+
    "\1\u0170\1\0\1\u0149\20\0\1\u0171\102\0\1\u0172\2\0"+
    "\1\u0164\13\0\1\u0150\2\0\1\u0151\103\0\1\u0164\2\0"+
    "\1\u0164\16\0\1\u0151\103\0\1\u0173\1\u0155\1\0\1\u0158"+
    "\2\0\1\u013d\1\0\1\u015b\5\0\1\u013d\10\0\1\u0155"+
    "\76\0\1\u0174\2\0\1\u0158\4\0\1\u0159\115\0\1\u015b"+
    "\7\0\1\u015b\114\0\1\u0175\1\u0176\22\0\1\u0152\2\0"+
    "\1\u0154\24\0\1\u0175\51\0\2\u0177\52\0\1\u0177\51\0"+
    "\2\u0178\52\0\1\u0178\52\0\1\u0152\22\0\1\u0152\102\0"+
    "\1\u0162\5\0\1\u0162\117\0\1\u0179\7\0\1\u0141\1\0"+
    "\1\u0143\113\0\1\u017a\11\0\1\u017b\10\0\1\u0171\102\0"+
    "\1\u017b\11\0\1\u017b\113\0\1\u0171\22\0\1\u0171\102\0"+
    "\1\u017c\11\0\1\u017c\113\0\1\u017d\2\0\1\u0164\6\0"+
    "\1\u0144\7\0\1\u0151\102\0\1\u015d\1\u017e\5\0\1\u015f"+
    "\1\0\1\u0165\5\0\1\u015f\34\0\1\u015d\52\0\1\u017f"+
    "\11\0\1\u017c\10\0\1\u0171\101\0\1\u0180\1\u0181\5\0"+
    "\1\u016a\1\0\1\u0159\12\0\1\u0152\27\0\1\u0180\51\0"+
    "\1\u0178\1\u0182\5\0\1\u016a\14\0\1\u0152\27\0\1\u0178"+
    "\51\0\1\u0178\1\u0183\22\0\1\u0152\27\0\1\u0178\52\0"+
    "\1\u0184\1\0\1\u0149\7\0\1\u015c\113\0\1\u0149\1\0"+
    "\1\u0149\122\0\1\u0168\1\u0185\7\0\1\u0141\1\0\1\u0186"+
    "\11\0\1\u0153\3\0\1\u0156\22\0\1\u0168\51\0\2\u0156"+
    "\27\0\1\u0156\22\0\1\u0156\51\0\2\u0168\27\0\1\u0156"+
    "\22\0\1\u0168\22\0\1\u0187\155\0\1\u0188\1\u0155\1\0"+
    "\1\u0158\4\0\1\u015b\15\0\1\u0154\1\u0155\76\0\1\u0158"+
    "\2\0\1\u0158\122\0\1\u0189\1\u0155\1\0\1\u0158\4\0"+
    "\1\u015b\16\0\1\u0155\36\0\2\13\1\0\1\13\1\116"+
    "\1\0\2\13\1\0\1\13\1\u018a\24\13\61\0\1\13"+
    "\1\0\2\13\2\0\2\13\1\0\1\13\1\116\1\0"+
    "\2\13\1\0\20\13\1\u018b\5\13\61\0\1\13\1\0"+
    "\2\13\2\0\2\13\1\0\1\13\1\116\1\0\2\13"+
    "\1\0\13\13\1\u018c\12\13\61\0\1\13\1\0\2\13"+
    "\2\0\2\13\1\0\1\13\1\116\1\0\2\13\1\0"+
    "\2\13\1\u018d\23\13\61\0\1\13\1\0\2\13\2\0"+
    "\2\13\1\0\1\13\1\116\1\0\2\13\1\0\15\13"+
    "\1\u0121\10\13\61\0\1\13\1\0\2\13\2\0\2\13"+
    "\1\0\1\13\1\116\1\0\2\13\1\0\7\13\1\u018e"+
    "\16\13\61\0\1\13\1\0\2\13\2\0\2\13\1\0"+
    "\1\13\1\116\1\0\2\13\1\0\5\13\1\u018f\20\13"+
    "\61\0\1\13\1\0\2\13\2\0\2\13\1\0\1\13"+
    "\1\116\1\0\2\13\1\0\12\13\1\u0190\13\13\61\0"+
    "\1\13\1\0\2\13\2\0\2\13\1\0\1\13\1\116"+
    "\1\0\2\13\1\0\15\13\1\u0191\10\13\61\0\1\13"+
    "\1\0\2\13\2\0\2\13\1\0\1\13\1\116\1\0"+
    "\2\13\1\0\6\13\1\u0192\17\13\61\0\1\13\1\0"+
    "\2\13\2\0\2\13\1\0\1\13\1\116\1\0\2\13"+
    "\1\0\1\u0193\25\13\61\0\1\13\1\0\2\13\2\0"+
    "\2\13\1\0\1\13\1\116\1\0\2\13\1\0\7\13"+
    "\1\u0194\16\13\61\0\1\13\1\0\2\13\2\0\2\13"+
    "\1\0\1\13\1\116\1\0\2\13\1\0\12\13\1\u0195"+
    "\13\13\61\0\1\13\1\0\2\13\2\0\2\13\1\0"+
    "\1\13\1\116\1\0\2\13\1\0\21\13\1\u0196\4\13"+
    "\61\0\1\13\1\0\2\13\2\0\2\13\1\0\1\13"+
    "\1\116\1\0\2\13\1\0\1\13\1\u0197\24\13\61\0"+
    "\1\13\1\0\2\13\2\0\2\13\1\0\1\13\1\116"+
    "\1\0\2\13\1\0\1\u0198\25\13\61\0\1\13\1\0"+
    "\2\13\2\0\2\13\1\0\1\13\1\116\1\0\2\13"+
    "\1\0\1\u0199\25\13\61\0\1\13\1\0\2\13\2\0"+
    "\2\13\1\0\1\13\1\116\1\0\2\13\1\0\15\13"+
    "\1\u019a\10\13\61\0\1\13\1\0\2\13\2\0\2\13"+
    "\1\0\1\13\1\116\1\0\2\13\1\0\15\13\1\u019b"+
    "\10\13\61\0\1\13\1\0\2\13\2\0\2\13\1\0"+
    "\1\13\1\116\1\0\2\13\1\0\1\u019c\25\13\61\0"+
    "\1\13\1\0\2\13\2\0\2\13\1\0\1\13\1\116"+
    "\1\0\2\13\1\0\5\13\1\u019d\20\13\61\0\1\13"+
    "\1\0\2\13\2\0\2\13\1\0\1\13\1\116\1\0"+
    "\2\13\1\0\3\13\1\u019e\22\13\61\0\1\13\1\0"+
    "\2\13\2\0\2\13\1\0\1\13\1\116\1\0\2\13"+
    "\1\0\4\13\1\u019f\21\13\61\0\1\13\1\0\2\13"+
    "\2\0\2\13\1\0\1\13\1\116\1\0\2\13\1\0"+
    "\3\13\1\u01a0\22\13\61\0\1\13\1\0\2\13\2\0"+
    "\2\13\1\0\1\13\1\116\1\0\2\13\1\0\15\13"+
    "\1\u01a1\10\13\61\0\1\13\1\0\2\13\2\0\2\13"+
    "\1\0\1\13\1\116\1\0\1\13\1\u01a2\1\0\26\13"+
    "\61\0\1\13\1\0\2\13\41\0\1\u01a3\1\u01a4\3\0"+
    "\1\u01a5\6\0\1\u01a6\5\0\1\u01a5\1\u01a7\30\0\1\u01a3"+
    "\52\0\1\u01a7\21\0\1\u01a7\102\0\2\u01a3\52\0\1\u01a3"+
    "\52\0\1\u01a5\3\0\1\u01a5\14\0\1\u01a5\104\0\1\u01a6"+
    "\12\0\1\u01a6\112\0\1\u01a8\1\u01a9\2\0\1\u01aa\6\0"+
    "\1\u01ab\5\0\1\u01aa\104\0\2\u01a9\124\0\1\u01ac\3\0"+
    "\1\u01aa\6\0\1\u01ab\5\0\1\u01aa\104\0\1\u01aa\3\0"+
    "\1\u01aa\14\0\1\u01aa\104\0\1\u01ab\12\0\1\u01ab\112\0"+
    "\1\u01ad\22\0\1\u01ad\102\0\1\u01ae\5\0\1\u01af\1\0"+
    "\1\u01b0\3\0\1\u01b1\110\0\1\u01a3\1\u01b2\1\u01a9\2\0"+
    "\1\u01a5\1\0\1\u01b3\1\0\1\u01b4\1\0\1\u01b5\1\u01b6"+
    "\1\u01b7\1\0\1\u01b8\1\u01b9\1\0\1\u01a5\1\u01a7\1\u01ba"+
    "\7\0\1\u01bb\17\0\1\u01a3\1\0\1\u01bb\50\0\1\u01bc"+
    "\16\0\1\u01bd\2\0\1\u01a7\103\0\1\u01bb\32\0\1\u01bb"+
    "\21\0\1\u01bb\47\0\1\u01a3\1\u01be\1\u01bf\51\0\1\u01a3"+
    "\52\0\1\u01c0\3\0\1\u01a5\6\0\1\u01c1\1\u01c2\2\0"+
    "\1\u01c3\1\0\1\u01a5\104\0\1\u01c4\1\u01a9\4\0\1\u01c5"+
    "\7\0\1\u01b8\4\0\1\u01ba\102\0\1\u01c6\3\0\1\u01aa"+
    "\6\0\1\u01c7\5\0\1\u01aa\1\0\1\u01c8\102\0\1\u01b5"+
    "\11\0\1\u01b5\113\0\1\u01c9\3\0\1\u01a5\12\0\1\u01c3"+
    "\1\0\1\u01a5\104\0\1\u01ca\32\0\1\u01ca\21\0\1\u01ca"+
    "\50\0\2\u01cb\124\0\1\u01b4\7\0\1\u01b4\115\0\1\u01bd"+
    "\16\0\1\u01bd\106\0\1\u01cc\3\0\1\u01aa\14\0\1\u01aa"+
    "\1\0\1\u01cc\102\0\1\u01cc\22\0\1\u01cc\101\0\2\u01a3"+
    "\22\0\1\u01ba\27\0\1\u01a3\52\0\1\u01ba\22\0\1\u01ba"+
    "\102\0\1\u01c8\22\0\1\u01c8\102\0\1\u01cd\5\0\1\u01af"+
    "\1\0\1\u01b0\115\0\1\u01ce\5\0\1\u01af\1\0\1\u01b0"+
    "\6\0\1\u01c3\106\0\1\u01c3\16\0\1\u01c3\106\0\1\u01b1"+
    "\13\0\1\u01b1\111\0\1\u01cf\13\0\1\u01b7\16\0\1\u01bb"+
    "\21\0\1\u01bb\50\0\1\u01c2\13\0\1\u01c2\111\0\1\u01d0"+
    "\1\u01bf\4\0\1\u01d1\117\0\2\u01bf\124\0\1\u01d1\5\0"+
    "\1\u01d1\117\0\1\u01d2\1\u01a9\20\0\1\u01a7\103\0\1\u01c1"+
    "\12\0\1\u01c1\112\0\1\u01b8\5\0\1\u01b8\7\0\1\u01b8"+
    "\107\0\1\u01d3\5\0\1\u01b3\1\0\1\u01b4\1\0\1\u01b5"+
    "\1\u01c1\1\u01b1\1\0\1\u01b8\1\u01c3\106\0\1\u01d4\12\0"+
    "\1\u01c1\3\0\1\u01c3\106\0\1\u01c5\5\0\1\u01c5\7\0"+
    "\1\u01b8\107\0\1\u01d5\1\u01bf\31\0\1\u01ca\21\0\1\u01ca"+
    "\50\0\1\u01d6\3\0\1\u01a5\12\0\1\u01bd\1\0\1\u01a5"+
    "\1\0\1\u01ba\102\0\1\u01d7\7\0\1\u01b0\3\0\1\u01b1"+
    "\111\0\1\u01d8\7\0\1\u01b4\3\0\1\u01b1\111\0\1\u01b0"+
    "\7\0\1\u01b0\115\0\1\u01d9\1\u01a9\2\0\1\u01aa\14\0"+
    "\1\u01aa\104\0\1\u01da\16\0\1\u01db\3\0\1\u01c8\102\0"+
    "\1\u01db\16\0\1\u01db\106\0\1\u01dc\1\u01bf\11\0\1\u01ab"+
    "\112\0\1\u01dd\5\0\1\u01de\1\0\1\u01b0\6\0\1\u01c3"+
    "\106\0\1\u01df\12\0\1\u01c1\1\u01b1\6\0\1\u01cc\102\0"+
    "\1\u01e0\12\0\1\u01c1\1\u01b1\111\0\1\u01e1\22\0\1\u01c8"+
    "\7\0\1\u01bb\21\0\1\u01bb\50\0\1\u01e2\7\0\1\u01b4"+
    "\6\0\1\u01bd\3\0\1\u01ba\102\0\1\u01e3\16\0\1\u01bd"+
    "\3\0\1\u01ba\42\0\2\13\1\0\1\13\1\116\1\0"+
    "\2\13\1\0\5\13\1\u01e4\20\13\61\0\1\13\1\0"+
    "\2\13\2\0\2\13\1\0\1\13\1\116\1\0\2\13"+
    "\1\0\1\u01e5\25\13\61\0\1\13\1\0\2\13\2\0"+
    "\2\13\1\0\1\13\1\116\1\0\2\13\1\0\12\13"+
    "\1\u01e6\13\13\61\0\1\13\1\0\2\13\2\0\2\13"+
    "\1\0\1\13\1\116\1\0\2\13\1\0\21\13\1\u01e7"+
    "\4\13\61\0\1\13\1\0\2\13\2\0\2\13\1\0"+
    "\1\13\1\116\1\0\2\13\1\0\15\13\1\u01e8\10\13"+
    "\61\0\1\13\1\0\2\13\2\0\2\13\1\0\1\13"+
    "\1\116\1\0\2\13\1\0\4\13\1\u01e9\21\13\61\0"+
    "\1\13\1\0\2\13\2\0\2\13\1\0\1\13\1\116"+
    "\1\0\2\13\1\0\21\13\1\u01ea\4\13\61\0\1\13"+
    "\1\0\2\13\2\0\2\13\1\0\1\13\1\116\1\0"+
    "\2\13\1\0\4\13\1\u01eb\21\13\61\0\1\13\1\0"+
    "\2\13\2\0\2\13\1\0\1\13\1\116\1\0\1\13"+
    "\1\u01ec\1\0\26\13\61\0\1\13\1\0\2\13\2\0"+
    "\2\13\1\0\1\13\1\116\1\0\2\13\1\0\15\13"+
    "\1\u01ed\10\13\61\0\1\13\1\0\2\13\2\0\2\13"+
    "\1\0\1\13\1\116\1\0\2\13\1\0\4\13\1\u01ee"+
    "\21\13\61\0\1\13\1\0\2\13\2\0\2\13\1\0"+
    "\1\13\1\116\1\0\2\13\1\0\7\13\1\u01ef\16\13"+
    "\61\0\1\13\1\0\2\13\2\0\2\13\1\0\1\13"+
    "\1\116\1\0\2\13\1\0\12\13\1\u01f0\13\13\61\0"+
    "\1\13\1\0\2\13\2\0\2\13\1\0\1\13\1\116"+
    "\1\0\2\13\1\0\1\u01f1\25\13\61\0\1\13\1\0"+
    "\2\13\2\0\2\13\1\0\1\13\1\116\1\0\2\13"+
    "\1\0\5\13\1\u01f2\20\13\61\0\1\13\1\0\2\13"+
    "\42\0\1\u01f3\3\0\1\u01f4\14\0\1\u01f4\104\0\1\u01f5"+
    "\1\u01f6\2\0\1\u01f4\13\0\1\u01f7\1\u01f8\104\0\1\u01f7"+
    "\17\0\2\u01f7\104\0\2\u01f6\123\0\1\u01f9\1\u01fa\11\0"+
    "\1\u01fb\15\0\1\u01f9\22\0\1\u01f9\52\0\1\u01fb\11\0"+
    "\1\u01fb\112\0\2\u01f9\27\0\1\u01f9\22\0\1\u01f9\52\0"+
    "\1\u01fc\7\0\1\u01fd\12\0\1\u01fe\102\0\1\u01ff\7\0"+
    "\1\u01ff\115\0\1\u01fe\22\0\1\u01fe\102\0\1\u0200\7\0"+
    "\1\u0200\114\0\1\u01f9\1\u0201\1\u01f6\2\0\1\u01f4\3\0"+
    "\1\u0202\1\0\1\u0203\1\u0204\1\u0205\2\0\1\u0206\1\u01f7"+
    "\1\u01f8\1\0\1\u0207\1\u0208\3\0\1\u01f9\2\0\1\u0209"+
    "\17\0\1\u01f9\1\0\1\u0209\50\0\1\u020a\7\0\1\u01ff"+
    "\3\0\1\u020b\2\0\1\u0206\106\0\1\u0207\22\0\1\u0207"+
    "\102\0\1\u0204\12\0\1\u0204\111\0\1\u01f9\1\u020c\7\0"+
    "\1\u020d\7\0\2\u01f7\6\0\1\u01f9\22\0\1\u01f9\52\0"+
    "\1\u020e\7\0\1\u0200\1\0\1\u020f\11\0\1\u020f\101\0"+
    "\1\u0206\16\0\1\u0206\106\0\1\u0210\11\0\1\u0208\11\0"+
    "\1\u0208\6\0\1\u0209\21\0\1\u0209\50\0\1\u0211\13\0"+
    "\1\u0211\111\0\1\u0212\1\u01f6\10\0\1\u0208\11\0\1\u0208"+
    "\101\0\1\u0208\11\0\1\u0208\11\0\1\u0208\101\0\1\u0213"+
    "\3\0\1\u01f4\5\0\1\u0214\6\0\1\u01f4\104\0\1\u0214"+
    "\11\0\1\u0214\113\0\1\u0215\7\0\1\u020d\1\0\1\u020f"+
    "\11\0\1\u020f\6\0\1\u0209\21\0\1\u0209\50\0\1\u020d"+
    "\7\0\1\u020d\115\0\1\u020f\11\0\1\u020f\11\0\1\u020f"+
    "\101\0\1\u0209\32\0\1\u0209\21\0\1\u0209\50\0\1\u0216"+
    "\11\0\1\u01fb\1\0\1\u020b\2\0\1\u0206\106\0\1\u0217"+
    "\13\0\1\u020b\2\0\1\u0206\105\0\1\u01f9\1\u0218\17\0"+
    "\2\u01f7\6\0\1\u01f9\22\0\1\u01f9\52\0\1\u0219\13\0"+
    "\1\u0219\111\0\1\u021a\11\0\1\u021a\113\0\1\u021b\7\0"+
    "\1\u01ff\12\0\1\u01fe\102\0\1\u021c\7\0\1\u01ff\12\0"+
    "\1\u01fe\7\0\1\u0209\21\0\1\u0209\50\0\1\u021d\7\0"+
    "\1\u0200\1\0\1\u020f\1\0\1\u0211\7\0\1\u020f\101\0"+
    "\1\u021e\11\0\1\u0214\1\0\1\u020b\111\0\1\u020b\13\0"+
    "\1\u020b\111\0\1\u021f\1\u01f6\10\0\1\u01fb\113\0\1\u0220"+
    "\7\0\1\u0202\2\0\1\u0204\1\u020b\2\0\1\u0206\3\0"+
    "\1\u0207\7\0\1\u0209\21\0\1\u0209\50\0\1\u0221\7\0"+
    "\1\u020d\22\0\1\u0209\21\0\1\u0209\50\0\1\u0222\11\0"+
    "\1\u0214\1\0\1\u0219\111\0\1\u0223\7\0\1\u0200\12\0"+
    "\1\u01fe\102\0\1\u0224\7\0\1\u0200\12\0\1\u0207\102\0"+
    "\1\u0225\22\0\1\u0225\101\0\1\u01f9\1\u0226\11\0\1\u0214"+
    "\15\0\1\u01f9\22\0\1\u01f9\52\0\1\u0227\7\0\1\u01ff"+
    "\3\0\1\u020b\6\0\1\u01fe\7\0\1\u0209\21\0\1\u0209"+
    "\50\0\1\u0228\7\0\1\u01ff\3\0\1\u020b\111\0\1\u0229"+
    "\7\0\1\u0229\115\0\1\u022a\11\0\1\u0208\10\0\1\u0207"+
    "\1\u0208\41\0\2\13\1\0\1\13\1\116\1\0\2\13"+
    "\1\0\6\13\1\u022b\17\13\61\0\1\13\1\0\2\13"+
    "\2\0\2\13\1\0\1\13\1\116\1\0\2\13\1\0"+
    "\4\13\1\u022c\21\13\61\0\1\13\1\0\2\13\2\0"+
    "\2\13\1\0\1\13\1\116\1\0\2\13\1\0\4\13"+
    "\1\u022d\21\13\61\0\1\13\1\0\2\13\2\0\2\13"+
    "\1\0\1\13\1\116\1\0\2\13\1\0\4\13\1\u022e"+
    "\21\13\61\0\1\13\1\0\2\13\2\0\2\13\1\0"+
    "\1\13\1\116\1\0\2\13\1\0\5\13\1\u022f\20\13"+
    "\61\0\1\13\1\0\2\13\2\0\2\13\1\0\1\13"+
    "\1\116\1\0\2\13\1\0\5\13\1\u0230\20\13\61\0"+
    "\1\13\1\0\2\13\2\0\2\13\1\0\1\13\1\116"+
    "\1\0\2\13\1\0\5\13\1\u0231\20\13\61\0\1\13"+
    "\1\0\2\13\2\0\2\13\1\0\1\13\1\116\1\0"+
    "\2\13\1\0\21\13\1\u0232\4\13\61\0\1\13\1\0"+
    "\2\13\2\0\2\13\1\0\1\13\1\116\1\0\2\13"+
    "\1\0\15\13\1\u0233\10\13\61\0\1\13\1\0\2\13"+
    "\2\0\2\13\1\0\1\13\1\116\1\0\2\13\1\0"+
    "\6\13\1\u0234\17\13\61\0\1\13\1\0\2\13\42\0"+
    "\1\u0235\7\0\1\u0236\1\0\1\u0237\113\0\1\u0237\11\0"+
    "\1\u0237\113\0\1\u0236\7\0\1\u0236\115\0\1\u0238\13\0"+
    "\1\u0238\111\0\1\u0239\3\0\1\u023a\7\0\1\u0238\4\0"+
    "\1\u023a\104\0\1\u023a\3\0\1\u023a\14\0\1\u023a\104\0"+
    "\1\u023b\1\u023c\7\0\1\u023c\1\u023d\10\0\1\u023e\102\0"+
    "\2\u023c\7\0\1\u023c\114\0\1\u023f\11\0\1\u023d\10\0"+
    "\1\u023e\101\0\1\u0240\1\u0241\1\u0242\2\0\1\u023a\3\0"+
    "\1\u0243\1\u023c\1\u0244\1\0\1\u0238\4\0\1\u023a\1\0"+
    "\1\u0245\4\0\1\u0246\2\0\1\u0247\17\0\1\u0240\1\0"+
    "\1\u0247\47\0\1\u0248\1\u0249\1\u023c\7\0\1\u023c\1\u023d"+
    "\10\0\1\u023e\27\0\1\u0248\52\0\1\u024a\3\0\1\u023a"+
    "\3\0\1\u024b\10\0\1\u023a\103\0\2\u0246\27\0\1\u0246"+
    "\22\0\1\u0246\52\0\1\u024c\1\u024d\21\0\1\u0245\102\0"+
    "\1\u0247\32\0\1\u0247\21\0\1\u0247\50\0\1\u024b\7\0"+
    "\1\u024b\115\0\1\u024e\13\0\1\u024e\111\0\1\u024f\1\u023c"+
    "\7\0\1\u023c\11\0\1\u0245\7\0\1\u0247\21\0\1\u0247"+
    "\50\0\1\u0245\22\0\1\u0245\101\0\1\u0248\1\u0250\7\0"+
    "\1\u0236\3\0\1\u0238\36\0\1\u0248\51\0\2\u0248\52\0"+
    "\1\u0248\52\0\1\u0251\7\0\1\u0252\1\0\1\u023d\10\0"+
    "\1\u023e\102\0\1\u0252\7\0\1\u0252\115\0\1\u0253\7\0"+
    "\1\u024b\3\0\1\u024e\111\0\2\u024d\124\0\1\u0254\7\0"+
    "\1\u024b\1\0\1\u0237\113\0\1\u0255\3\0\1\u0255\14\0"+
    "\1\u0255\103\0\1\u0248\1\u0256\7\0\1\u0252\3\0\1\u024e"+
    "\36\0\1\u0248\52\0\1\u0257\3\0\1\u023a\14\0\1\u023a"+
    "\1\0\1\u0245\7\0\1\u0247\21\0\1\u0247\50\0\1\u0257"+
    "\22\0\1\u0245\7\0\1\u0247\21\0\1\u0247\50\0\1\u0258"+
    "\7\0\1\u0236\3\0\1\u0238\111\0\2\u0259\124\0\1\u025a"+
    "\3\0\1\u025a\14\0\1\u025a\104\0\1\u025b\1\u023c\7\0"+
    "\1\u023c\2\0\1\u024e\111\0\1\u025c\1\u024d\6\0\1\u0252"+
    "\1\0\1\u023d\10\0\1\u023e\102\0\1\u0245\3\0\1\u0255"+
    "\14\0\1\u0255\1\0\1\u0245\102\0\1\u025d\3\0\1\u023a"+
    "\5\0\1\u0237\6\0\1\u023a\103\0\1\u0240\1\u025e\1\u023c"+
    "\7\0\1\u023c\1\u023d\1\0\1\u024e\6\0\1\u0245\4\0"+
    "\1\u0246\2\0\1\u0247\17\0\1\u0240\1\0\1\u0247\47\0"+
    "\1\u0248\1\u025f\13\0\1\u024e\36\0\1\u0248\52\0\1\u0260"+
    "\1\u0259\2\0\1\u0255\14\0\1\u0255\104\0\1\u0261\3\0"+
    "\1\u0255\7\0\1\u0238\4\0\1\u0255\104\0\1\u0262\1\u023c"+
    "\7\0\1\u023c\2\0\1\u024e\6\0\1\u0245\102\0\1\u0263"+
    "\1\u023c\7\0\1\u023c\11\0\1\u0245\101\0\1\u0248\1\u0264"+
    "\11\0\1\u023d\10\0\1\u023e\27\0\1\u0248\12\0\2\13"+
    "\1\0\1\13\1\116\1\0\2\13\1\0\5\13\1\u0265"+
    "\20\13\61\0\1\13\1\0\2\13\2\0\2\13\1\0"+
    "\1\13\1\116\1\0\2\13\1\0\5\13\1\u0266\20\13"+
    "\61\0\1\13\1\0\2\13\2\0\2\13\1\0\1\13"+
    "\1\116\1\0\2\13\1\0\6\13\1\u0267\17\13\61\0"+
    "\1\13\1\0\2\13\2\0\2\13\1\0\1\13\1\116"+
    "\1\0\2\13\1\0\4\13\1\u0268\21\13\61\0\1\13"+
    "\1\0\2\13\42\0\1\u0269\3\0\1\u026a\5\0\1\u026b"+
    "\6\0\1\u026a\104\0\1\u026b\11\0\1\u026b\113\0\1\u026a"+
    "\3\0\1\u026a\14\0\1\u026a\104\0\2\u026c\123\0\2\u026d"+
    "\24\0\1\u026e\25\0\1\u026d\51\0\2\u026d\52\0\1\u026d"+
    "\52\0\1\u026e\24\0\1\u026e\100\0\1\u026f\1\u0270\7\0"+
    "\1\u0270\2\0\1\u0271\110\0\1\u026d\1\u0272\1\u0273\2\0"+
    "\1\u026a\1\0\1\u0274\2\0\1\u0270\1\u026b\1\0\1\u0271"+
    "\4\0\1\u026a\3\0\1\u026e\25\0\1\u026d\51\0\1\u026d"+
    "\1\u0275\11\0\1\u0276\40\0\1\u026d\52\0\1\u0277\5\0"+
    "\1\u0274\3\0\1\u026b\113\0\1\u026e\3\0\1\u026a\14\0"+
    "\1\u026a\3\0\1\u026e\100\0\1\u0271\13\0\1\u0271\111\0"+
    "\1\u0278\13\0\1\u0278\111\0\2\u0270\7\0\1\u0270\113\0"+
    "\1\u026d\1\u0279\1\u0270\7\0\1\u0270\13\0\1\u026e\25\0"+
    "\1\u026d\52\0\1\u0274\5\0\1\u0274\117\0\1\u0276\11\0"+
    "\1\u0276\113\0\2\u027a\123\0\1\u026d\1\u027b\13\0\1\u0278"+
    "\36\0\1\u026d\52\0\1\u027c\1\u0273\7\0\1\u0270\1\u026b"+
    "\113\0\1\u027d\5\0\1\u027e\16\0\1\u026e\100\0\1\u027e"+
    "\5\0\1\u027e\117\0\1\u027f\1\u027a\4\0\1\u0274\117\0"+
    "\1\u0280\3\0\1\u026a\1\0\1\u0274\12\0\1\u026a\104\0"+
    "\1\u0281\1\u0282\4\0\1\u027e\2\0\1\u0270\114\0\1\u0283"+
    "\1\u026c\10\0\1\u026b\113\0\1\u0284\11\0\1\u0284\112\0"+
    "\1\u026d\1\u0285\1\u027a\51\0\1\u026d\52\0\1\u0286\5\0"+
    "\1\u027e\3\0\1\u0276\12\0\1\u026e\77\0\1\u026d\1\u0287"+
    "\1\u0282\7\0\1\u0270\2\0\1\u0271\10\0\1\u026e\25\0"+
    "\1\u026d\52\0\2\u0282\7\0\1\u0270\114\0\1\u0288\1\u0270"+
    "\7\0\1\u0270\13\0\1\u026e\40\0\2\13\1\0\1\13"+
    "\1\116\1\0\2\13\1\0\5\13\1\u0289\20\13\61\0"+
    "\1\13\1\0\2\13\42\0\1\u028a\3\0\1\u028a\14\0"+
    "\1\u028a\104\0\1\u028b\11\0\1\u028b\112\0\1\u01fe\1\u028c"+
    "\1\u028d\51\0\1\u01fe\51\0\2\u01fe\52\0\1\u01fe\52\0"+
    "\2\u028d\123\0\1\u01fe\1\u028e\1\u028d\2\0\1\u028a\5\0"+
    "\1\u028b\1\0\1\u028f\4\0\1\u028a\31\0\1\u01fe\51\0"+
    "\1\u01fe\1\u0290\11\0\1\u028b\40\0\1\u01fe\52\0\1\u028f"+
    "\13\0\1\u028f\111\0\1\u0291\3\0\1\u0291\14\0\1\u0291"+
    "\104\0\1\u0292\3\0\1\u028a\7\0\1\u028f\4\0\1\u028a"+
    "\104\0\2\u0293\124\0\1\u0294\11\0\1\u0294\112\0\1\u01fe"+
    "\1\u0290\3\0\1\u028a\5\0\1\u028b\6\0\1\u028a\31\0"+
    "\1\u01fe\52\0\1\u0295\13\0\1\u0295\111\0\1\u0296\11\0"+
    "\1\u0294\1\0\1\u028f\110\0\1\u01fe\1\u0297\11\0\1\u0294"+
    "\1\0\1\u0295\36\0\1\u01fe\51\0\1\u01fe\1\u0298\11\0"+
    "\1\u0294\40\0\1\u01fe\52\0\1\u0299\3\0\1\u028a\5\0"+
    "\1\u028b\6\0\1\u028a\104\0\1\u029a\3\0\1\u029a\14\0"+
    "\1\u029a\104\0\1\u029b\3\0\1\u0291\7\0\1\u0295\4\0"+
    "\1\u0291\103\0\1\u01fe\1\u029c\1\u028d\10\0\1\u0294\40\0"+
    "\1\u01fe\52\0\1\u029d\3\0\1\u029d\14\0\1\u029d\104\0"+
    "\1\u029e\11\0\1\u029e\113\0\1\u029f\3\0\1\u029d\5\0"+
    "\1\u029f\6\0\1\u029d\104\0\1\u02a0\11\0\1\u02a0\113\0"+
    "\1\u02a1\11\0\1\u02a1\113\0\1\u02a2\3\0\1\u02a2\14\0"+
    "\1\u02a2\104\0\1\u02a3\11\0\1\u02a3\113\0\1\u02a0\3\0"+
    "\1\u02a2\5\0\1\u02a0\6\0\1\u02a2\104\0\1\u02a3\3\0"+
    "\1\u02a2\5\0\1\u02a3\6\0\1\u02a2\104\0\1\u02a4\3\0"+
    "\1\u02a2\5\0\1\u029e\6\0\1\u02a2\104\0\1\u02a5\3\0"+
    "\1\u02a5\14\0\1\u02a5\104\0\1\u02a6\3\0\1\u02a6\14\0"+
    "\1\u02a6\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[43860];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\3\1\2\11\3\1\1\11\34\1\1\11"+
    "\1\1\15\11\11\1\1\11\2\1\1\11\1\1\1\11"+
    "\3\0\41\1\25\0\1\11\33\0\7\11\50\1\1\0"+
    "\1\11\3\0\1\1\6\0\1\1\7\0\2\1\17\0"+
    "\2\1\22\0\1\1\1\11\13\0\1\11\43\1\5\0"+
    "\1\11\6\0\2\1\2\0\1\1\2\0\1\1\4\0"+
    "\2\11\2\0\1\11\1\1\1\11\7\0\2\1\4\0"+
    "\1\11\1\1\1\11\1\1\2\0\2\1\2\0\1\1"+
    "\1\11\1\0\4\1\3\0\1\1\4\0\5\1\1\0"+
    "\2\1\1\11\35\1\1\11\2\0\1\1\1\0\1\11"+
    "\1\0\1\1\1\11\4\0\1\1\7\0\1\11\3\0"+
    "\1\1\1\0\1\1\3\0\1\1\1\0\1\1\1\0"+
    "\1\11\1\1\2\0\1\11\11\0\1\1\2\0\2\1"+
    "\4\0\1\1\1\0\22\1\2\11\1\1\2\0\1\1"+
    "\3\0\1\1\1\0\1\11\2\0\1\1\5\0\1\11"+
    "\13\0\1\1\7\0\2\1\3\0\1\1\2\0\2\1"+
    "\1\11\1\0\1\1\2\0\13\1\4\0\1\1\1\11"+
    "\1\1\2\0\1\11\1\1\1\0\1\1\3\0\1\11"+
    "\3\0\2\1\1\0\1\1\2\0\1\1\1\0\1\1"+
    "\3\0\1\11\1\0\1\1\2\0\1\11\1\0\3\1"+
    "\1\0\12\1\1\11\2\0\2\11\3\0\1\1\2\0"+
    "\1\1\3\0\1\1\1\0\1\1\1\0\1\1\2\0"+
    "\1\1\4\0\5\1\1\11\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\4\0\3\1\1\11\2\1"+
    "\1\11\1\0\1\1\1\11\1\0\2\11\1\1\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[678];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

	private Parser yyparser;

  	public Yylex(java.io.Reader r, Parser yyparser) {
	    this(r);
	    this.yyparser = yyparser;
  	}

	int INTEGEROBJ 	= 257;
	int DASHED_INTEGER = 258;
	int IDENTIFIER = 259;
	int CE = 260;
	int BCE = 261;
	int AIWNA = 262;
	int AIWNAS = 263;
	int CENTURY = 264;
	int DECAETIA = 265;
	int TOY = 266;
	int AAT = 267;
	int ULAN = 268;
	int ARXES =  269;
	int MESA = 270;
	int TELH = 271;
	int MISO = 272;
	int TETARTO = 273;
	int CA = 274;
	int LETTER = 275;
	int NOW = 276;
	int ALLTIME = 277;
	int ANTE = 278;
	int POST = 279;
	int QUEM = 280;
	int TO = 281;
	int PRIOR = 282;
	int LATER = 283;
	int THAN = 284;
	int PROIMOTERO = 285;
	int YSTEROTERO = 286;
	int PRIN = 287;
	int APO = 288;
	int META = 289;

	int arithmetic = 290;
	int Month = 291;
	int genitive_number = 292;
	int nominative_number = 293;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 362) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return 0; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print(yytext());
            }
          case 106: break;
          case 2: 
            { yyparser.yylval = new ParserVal(Integer.parseInt(yytext()));
							return(INTEGEROBJ);
            }
          case 107: break;
          case 3: 
            { return(IDENTIFIER);
            }
          case 108: break;
          case 4: 
            { 
            }
          case 109: break;
          case 5: 
            { return('`');
            }
          case 110: break;
          case 6: 
            { return('-');
            }
          case 111: break;
          case 7: 
            { return('.');
            }
          case 112: break;
          case 8: 
            { return(',');
            }
          case 113: break;
          case 9: 
            { return('[');
            }
          case 114: break;
          case 10: 
            { return(']');
            }
          case 115: break;
          case 11: 
            { return('^');
            }
          case 116: break;
          case 12: 
            { return('&');
            }
          case 117: break;
          case 13: 
            { return(';');
            }
          case 118: break;
          case 14: 
            { return(':');
            }
          case 119: break;
          case 15: 
            { return('$');
            }
          case 120: break;
          case 16: 
            { return('!');
            }
          case 121: break;
          case 17: 
            { return('>');
            }
          case 122: break;
          case 18: 
            { return('<');
            }
          case 123: break;
          case 19: 
            { return('/');
            }
          case 124: break;
          case 20: 
            { return('?');
            }
          case 125: break;
          case 21: 
            { return('*');
            }
          case 126: break;
          case 22: 
            { yybegin(YYINITIAL);
				return( DASHED_INTEGER);
            }
          case 127: break;
          case 23: 
            { yybegin(YYINITIAL);
			return( LETTER);
            }
          case 128: break;
          case 24: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { yybegin(dash_mode);
						yyparser.yylval = new ParserVal(Integer.parseInt(yytext()));
            }
          case 129: break;
          case 25: 
            { return CE;
            }
          case 130: break;
          case 26: 
            { return TO;
            }
          case 131: break;
          case 27: 
            { return TOY;
            }
          case 132: break;
          case 28: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 1);
            { yybegin(lower_mode);
                String text = yytext();

                if(text.equals("\u03B1")) //α
                	yyparser.yylval = new ParserVal(1);
                else if(text.equals("\u03B2")) //β
                	yyparser.yylval = new ParserVal(2);
                else if(text.equals("\u03B3")) //γ
                	yyparser.yylval = new ParserVal(3);
                else	//δ
                	yyparser.yylval = new ParserVal(4);
            }
          case 133: break;
          case 29: 
            { yybegin(YYINITIAL);
				return( nominative_number);
            }
          case 134: break;
          case 30: 
            { yybegin(YYINITIAL);
				return ( genitive_number );
            }
          case 135: break;
          case 31: 
            { yybegin(YYINITIAL);
								return( nominative_number);
            }
          case 136: break;
          case 32: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { yybegin(english_number_mode);
					yyparser.yylval = new ParserVal(Integer.parseInt(yytext()));
            }
          case 137: break;
          case 33: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { yybegin(nominative_number_mode);
					yyparser.yylval = new ParserVal(Integer.parseInt(yytext()));
            }
          case 138: break;
          case 34: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { yybegin(genitive_number_mode);
					yyparser.yylval = new ParserVal(Integer.parseInt(yytext()));
            }
          case 139: break;
          case 35: 
            { return CA;
            }
          case 140: break;
          case 36: 
            { return AAT;
            }
          case 141: break;
          case 37: 
            { return NOW;
            }
          case 142: break;
          case 38: 
            { yyparser.yylval = new ParserVal(5); return Month;
            }
          case 143: break;
          case 39: 
            { return MESA;
            }
          case 144: break;
          case 40: 
            { return BCE;
            }
          case 145: break;
          case 41: 
            { return APO;
            }
          case 146: break;
          case 42: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 1);
            { yybegin(first_mode);
					yyparser.yylval = new ParserVal(Integer.parseInt(yytext()));
            }
          case 147: break;
          case 43: 
            { return ANTE;
            }
          case 148: break;
          case 44: 
            { return THAN;
            }
          case 149: break;
          case 45: 
            { return ULAN;
            }
          case 150: break;
          case 46: 
            { return TELH;
            }
          case 151: break;
          case 47: 
            { yyparser.yylval = new ParserVal(10); return arithmetic;
            }
          case 152: break;
          case 48: 
            { return MISO;
            }
          case 153: break;
          case 49: 
            { return QUEM;
            }
          case 154: break;
          case 50: 
            { return POST;
            }
          case 155: break;
          case 51: 
            { yyparser.yylval = new ParserVal(7); return Month;
            }
          case 156: break;
          case 52: 
            { yyparser.yylval = new ParserVal(6); return Month;
            }
          case 157: break;
          case 53: 
            { return PRIN;
            }
          case 158: break;
          case 54: 
            { return META;
            }
          case 159: break;
          case 55: 
            { yyparser.yylval = new ParserVal(6);   
	return arithmetic;
            }
          case 160: break;
          case 56: 
            { yyparser.yylval = new ParserVal(4); return Month;
            }
          case 161: break;
          case 57: 
            { yyparser.yylval = new ParserVal(3); return arithmetic;
            }
          case 162: break;
          case 58: 
            { return LATER;
            }
          case 163: break;
          case 59: 
            { yyparser.yylval = new ParserVal(9); return arithmetic;
            }
          case 164: break;
          case 60: 
            { return ARXES;
            }
          case 165: break;
          case 61: 
            { yyparser.yylval = new ParserVal(1); return arithmetic;
            }
          case 166: break;
          case 62: 
            { yyparser.yylval = new ParserVal(5); return arithmetic;
            }
          case 167: break;
          case 63: 
            { yyparser.yylval = new ParserVal(3); return Month;
            }
          case 168: break;
          case 64: 
            { return PRIOR;
            }
          case 169: break;
          case 65: 
            { yyparser.yylval = new ParserVal(6); return arithmetic;
            }
          case 170: break;
          case 66: 
            { return AIWNA;
            }
          case 171: break;
          case 67: 
            { yyparser.yylval = new ParserVal(5); 
	return Month;
            }
          case 172: break;
          case 68: 
            { yyparser.yylval = new ParserVal(9);   
	return arithmetic;
            }
          case 173: break;
          case 69: 
            { yyparser.yylval = new ParserVal(1); 
	return arithmetic;
            }
          case 174: break;
          case 70: 
            { yyparser.yylval = new ParserVal(8);  
	return arithmetic;
            }
          case 175: break;
          case 71: 
            { yyparser.yylval = new ParserVal(3); 
	return arithmetic;
            }
          case 176: break;
          case 72: 
            { yyparser.yylval = new ParserVal(8); return Month;
            }
          case 177: break;
          case 73: 
            { yyparser.yylval = new ParserVal(8); return arithmetic;
            }
          case 178: break;
          case 74: 
            { return DECAETIA;
            }
          case 179: break;
          case 75: 
            { yyparser.yylval = new ParserVal(4); return arithmetic;
            }
          case 180: break;
          case 76: 
            { yyparser.yylval = new ParserVal(2); return arithmetic;
            }
          case 181: break;
          case 77: 
            { return AIWNAS;
            }
          case 182: break;
          case 78: 
            { yyparser.yylval = new ParserVal(10);  	
	return arithmetic;
            }
          case 183: break;
          case 79: 
            { yyparser.yylval = new ParserVal(5);  
	return arithmetic;
            }
          case 184: break;
          case 80: 
            { yyparser.yylval = new ParserVal(7);   
	return arithmetic;
            }
          case 185: break;
          case 81: 
            { return CENTURY;
            }
          case 186: break;
          case 82: 
            { return ALLTIME;
            }
          case 187: break;
          case 83: 
            { yyparser.yylval = new ParserVal(10); return Month;
            }
          case 188: break;
          case 84: 
            { return TETARTO;
            }
          case 189: break;
          case 85: 
            { yyparser.yylval = new ParserVal(7); return arithmetic;
            }
          case 190: break;
          case 86: 
            { yyparser.yylval = new ParserVal(1); return Month;
            }
          case 191: break;
          case 87: 
            { yyparser.yylval = new ParserVal(3);  
	return Month;
            }
          case 192: break;
          case 88: 
            { yyparser.yylval = new ParserVal(4);
	 return arithmetic;
            }
          case 193: break;
          case 89: 
            { yyparser.yylval = new ParserVal(2); 
	return arithmetic;
            }
          case 194: break;
          case 90: 
            { yyparser.yylval = new ParserVal(6);  
	return Month;
            }
          case 195: break;
          case 91: 
            { yyparser.yylval = new ParserVal(7); 
	return Month;
            }
          case 196: break;
          case 92: 
            { yyparser.yylval = new ParserVal(11); return Month;
            }
          case 197: break;
          case 93: 
            { yyparser.yylval = new ParserVal(12); return Month;
            }
          case 198: break;
          case 94: 
            { yyparser.yylval = new ParserVal(2); return Month;
            }
          case 199: break;
          case 95: 
            { yyparser.yylval = new ParserVal(4);  
	return Month;
            }
          case 200: break;
          case 96: 
            { yyparser.yylval = new ParserVal(9); return Month;
            }
          case 201: break;
          case 97: 
            { yyparser.yylval = new ParserVal(8); 	
	return Month;
            }
          case 202: break;
          case 98: 
            { yyparser.yylval = new ParserVal(10);  
	return Month;
            }
          case 203: break;
          case 99: 
            { yyparser.yylval = new ParserVal(11);  
    return Month;
            }
          case 204: break;
          case 100: 
            { yyparser.yylval = new ParserVal(1);  
	return Month;
            }
          case 205: break;
          case 101: 
            { return PROIMOTERO;
            }
          case 206: break;
          case 102: 
            { yyparser.yylval = new ParserVal(12);  
	return Month;
            }
          case 207: break;
          case 103: 
            { return YSTEROTERO;
            }
          case 208: break;
          case 104: 
            { yyparser.yylval = new ParserVal(2);  
	return Month;
            }
          case 209: break;
          case 105: 
            { yyparser.yylval = new ParserVal(9);  
	return Month;
            }
          case 210: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Yylex [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Yylex scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Yylex(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
